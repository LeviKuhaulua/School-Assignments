TASK 1

NOT Gate: 

CHIP Not {
    IN in;
    OUT out;

    PARTS:
    Nand(a=in, b=in, out=out); 
}


OR Gate: 

CHIP Or {
    IN a, b;
    OUT out;

    PARTS:
    Nand(a=a, b=a, out=equ1); // split a into two input pings
    Nand(a=b, b=b, out=equ2); // split b into two input pings
    Nand(a=equ1, b=equ2, out=out); 
}


AND Gate: 

CHIP And {
    IN a, b;
    OUT out;
    
    PARTS:
    Nand(a=a, b=b, out=equ1); 
    // Splits equ1 ping into 2 input pings
    Nand(a=equ1, b=equ1, out=out); 
}

END OF TASK 1 

TASK 2

XOR Gate: 

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    // Gets the opposite of the input pings 
    Not(in=a, out=not1); 
    Not(in=b, out=not2); 
    // First AND comparison
    And(a=not1, b=b, out=equ1); 
    // Second AND comparison
    And(a=a, b=not2, out=equ2); 
    // Last comparison which is the OUT comparison. 
    Or(a=equ1, b=equ2, out=out); 
}


MUX Gate: 

CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    // Getting opposite value for sel ping 
    Not(in=sel, out=sel1); 
    // Check if selection is equal to 0. 
    And(a=a, b=sel1, out=equ1); 
    // Check if selection is equal to 1. 
    And(a=sel, b=b, out=equ2); 
    // Output. 
    Or(a=equ1, b=equ2, out=out); 
    
}

END OF TASK 2 

TASK 3

Or16 Gate: 

CHIP Or16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    // Compares each individual bit
    Or(a=a[0], b=b[0], out=out[0]);
    Or(a=a[1], b=b[1], out=out[1]);
    Or(a=a[2], b=b[2], out=out[2]);
    Or(a=a[3], b=b[3], out=out[3]);
    Or(a=a[4], b=b[4], out=out[4]);
    Or(a=a[5], b=b[5], out=out[5]);
    Or(a=a[6], b=b[6], out=out[6]);
    Or(a=a[7], b=b[7], out=out[7]);
    Or(a=a[8], b=b[8], out=out[8]);
    Or(a=a[9], b=b[9], out=out[9]);
    Or(a=a[10], b=b[10], out=out[10]);
    Or(a=a[11], b=b[11], out=out[11]);
    Or(a=a[12], b=b[12], out=out[12]);
    Or(a=a[13], b=b[13], out=out[13]);
    Or(a=a[14], b=b[14], out=out[14]);
    Or(a=a[15], b=b[15], out=out[15]);
     
}


END OF TASK 3







